<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>好きだよ！</title>
  
  <subtitle>Alin&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sukidayo.top/"/>
  <updated>2019-11-25T10:14:58.426Z</updated>
  <id>http://www.sukidayo.top/</id>
  
  <author>
    <name>Alin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表</title>
    <link href="http://www.sukidayo.top/2019/11/21/linkedlist/"/>
    <id>http://www.sukidayo.top/2019/11/21/linkedlist/</id>
    <published>2019-11-21T10:01:10.000Z</published>
    <updated>2019-11-25T10:14:58.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>本文主要介绍C语言中单链表的相关操作</p> <a id="more"></a> <p>对于一组数据的存储，通常有两种方法：数组和链表</p><p>在C语言中，数组是一组<strong>地址连续</strong>的存储单元，依次存储数据元素。</p><p><img src="/2019/11/21/linkedlist/linkedlist%5Cimage-20191121100943216.png" alt="数组的存储方式"></p><p>链表（本文只涉及单链表）是一组<strong>地址任意</strong>的存储单元，存储的是<strong>“节点”</strong>，节点由<strong>数据域</strong>和<strong>指针域</strong>（指示后继元素位置）组成。节点的序列即称为链表。</p><p><img src="/2019/11/21/linkedlist/linkedlist%5Cimage-20191121101017506.png" alt="链表的存储方式"></p><p>数组是提前申请好固定大小的连续空间，然后往空间内填充数据，每个数据的位置由<strong>数组的首地址和下标</strong>唯一确定；而链表则是一组离散的节点，每个节点<strong>指示下一个节点的位置</strong>，因此链表对空间的连续性没有要求。</p><p>通常来说，链表与数组相比有以下优缺点：</p><table><thead><tr><th></th><th>链表</th><th>数组</th></tr></thead><tbody><tr><td>内存占用</td><td>不需连续的内存空间</td><td>连续的内存空间</td></tr><tr><td>大小可变</td><td>大小可动态变化</td><td>大小固定，不能动态扩展</td></tr><tr><td>访问方式</td><td>只允许顺序访问</td><td>允许随机访问</td></tr><tr><td>增删元素</td><td>较快，$O(1)$<a href="$O(1)$指常量时间，$O(n)$指线性时间。">^1</a></td><td>较慢，$O(n)$</td></tr><tr><td>查询第$n$个元素</td><td>较慢，$O(n)$</td><td>较快，$O(1)$</td></tr></tbody></table><p>所以，对于数据规模未知/数据规模可能发生变化的数据集，通常采用链表的形式存储。<del>当然开一个巨大的数组也不是不行，只是会造成额外的内存开销。</del></p><h3 id="链表常用操作"><a href="#链表常用操作" class="headerlink" title="链表常用操作"></a>链表常用操作</h3><p>以下所有操作基于这个链表结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*LinkList;</span><br></pre></td></tr></table></figure><h4 id="为什么引入头结点"><a href="#为什么引入头结点" class="headerlink" title="为什么引入头结点"></a>为什么引入头结点</h4><ul><li>头结点是为了操作的统一与方便而设立的，放在第一个元素结点之前，其数据域一般无意义<del>（当然有些情况下也可存放链表的长度、用做监视哨等等）</del>。</li><li>若无头结点，对第一个元素的操作需要特殊处理，增加工作量的同时提高了产生bug的概率。</li><li>有了头结点后，<strong>对在第一个元素结点前插入结点和删除第一个结点，其操作与对其它结点的操作统一了。</strong></li></ul><p>链表的创建较为简单，这里不再赘述。</p><h4 id="链表的遍历"><a href="#链表的遍历" class="headerlink" title="链表的遍历"></a>链表的遍历</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traverse</span><span class="params">(LinkList <span class="built_in">list</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//遍历输出链表中所有元素的data域的值</span></span><br><span class="line">    LinkList h=<span class="built_in">list</span>;<span class="comment">//指向头节点</span></span><br><span class="line"><span class="keyword">while</span> (h-&gt;next != <span class="literal">NULL</span>) &#123;<span class="comment">//当h是尾节点时结束循环 注意，循环中会将h指向h-&gt;next，因此第一次循环不会输出头结点的data域，而最后一次循环会输出尾节点的data域</span></span><br><span class="line">h = h-&gt;next;<span class="comment">//将h指向h的下一个节点，循环条件保证了此处内存访问不会越界</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d  "</span>, h-&gt;data);<span class="comment">//平凡的输出语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表的插入"><a href="#链表的插入" class="headerlink" title="链表的插入"></a>链表的插入</h4><p><img src="/2019/11/21/linkedlist/linkedlist%5Cimage-20191121103043870.png" alt="插入图示"></p><p>最初，$a_{i-1}$指向$a_i$，而根据图示，如果将一个元素e插入至$a_{i-1}$与$a_i$之间，只需要将插入的元素指向$a_i$的地址（即$a_{i-1}$的指针域），并将$a_{i-1}$指向的地址改为插入元素的地址。</p><p>只需要进行以下操作即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> _index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把数据插入一个链表中的第_index个位置</span></span><br><span class="line">LinkList t = <span class="built_in">list</span>, e;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; _index &amp;&amp; t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="comment">//这个循环用于抵达链表的第_index个位置或者抵达链表尾（当_index大于链表长度的情况，t在i&lt;_index前即指向了尾节点的指针域，即NULL，此时跳出循环,t==NULL）</span></span><br><span class="line"><span class="keyword">if</span> (t != <span class="literal">NULL</span>) &#123;<span class="comment">//如果链表长度不小于n</span></span><br><span class="line">e = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));<span class="comment">//申请新的空间</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"输入要插入的值"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;in-&gt;data);<span class="comment">//这两行用于录入数据</span></span><br><span class="line">e-&gt;next = t-&gt;next;<span class="comment">//新申请的空间（即上图的节点e）指向（（插入位置前的节点）所指向的位置），即节点e指向插入位置后面的节点，也就是上图中的 使e指向a_i</span></span><br><span class="line">t-&gt;next = e;<span class="comment">//插入位置前的节点指向新建立的节点，也就是上图中的a_&#123;i-1&#125;指向e</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//链表长度小于n，这里写错误处理语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//由于头节点的引入以及尾节点指针域置为NULL的操作，此处理方法适用于链表内的所有节点</span></span><br></pre></td></tr></table></figure><h4 id="链表节点的删除"><a href="#链表节点的删除" class="headerlink" title="链表节点的删除"></a>链表节点的删除</h4><p><img src="/2019/11/21/linkedlist/linkedlist%5Cimage-20191121104218179.png" alt="删除图示"></p><p>如图，若要删除$a_{i-1}$与$a_{i+1}$之间的$a_i$元素，只需要将$a_{i-1}$跨过$a_i$指向$a_{i+1}$即可。不要忘记将$a_i$的空间释放掉。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(LinkList <span class="built_in">list</span>, <span class="keyword">int</span> _index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//删除链表中第_index个元素</span></span><br><span class="line">LinkList t = <span class="built_in">list</span>, in;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; _index &amp;&amp; t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">in = t;</span><br><span class="line">t = t-&gt;next;<span class="comment">//in始终是t的前一个节点，这里的in是上图中的a_&#123;i-1&#125;，t是a_i</span></span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="comment">//这个循环用于抵达链表的第_index个位置或者抵达链表尾（当_index大于链表长度的情况，t在i&lt;_index前即指向了尾节点的指针域，即NULL，此时跳出循环,t==NULL）</span></span><br><span class="line"><span class="keyword">if</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">in-&gt;next = t-&gt;next;<span class="comment">//把a_&#123;i-1&#125;的指针域置为a_i的指针域，即指向a_&#123;i+1&#125;</span></span><br><span class="line"><span class="built_in">free</span>(t);<span class="comment">//释放掉a_i</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//链表长度小于n，这里写错误处理语句</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="OJ题目解析"><a href="#OJ题目解析" class="headerlink" title="OJ题目解析"></a>OJ题目解析</h3><p>Work in progress…</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;本文主要介绍C语言中单链表的相关操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://www.sukidayo.top/categories/C-C/"/>
    
    
      <category term="链表" scheme="http://www.sukidayo.top/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
